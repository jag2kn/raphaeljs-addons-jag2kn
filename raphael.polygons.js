// Generated by IcedCoffeeScript 1.4.0c
var Polygon;

Polygon = (function() {

  function Polygon(r) {
    var controls, dashed, linecurve, path, propiedades;
    this.r = r;
    dashed = {
      fill: "#F99",
      stroke: "#666",
      "stroke-dasharray": "- "
    };
    controls = null;
    path = null;
    linecurve = null;
    propiedades = null;
  }

  Polygon.prototype.movePoint = function(dx, dy) {
    this.update(dx - (this.dx || 0), dy - (this.dy || 0));
    this.dx = dx;
    this.dy = dy;
  };

  Polygon.prototype.up = function() {
    this.dx = this.dy = 0;
    this.animate({
      "fill-opacity": 1
    }, 500);
  };

  Polygon.prototype.start = function() {
    this.odx = 0;
    this.ody = 0;
    this.animate({
      "fill-opacity": 0.2
    }, 500);
  };

  Polygon.prototype.curve = function(color) {
    var ax, ay, cx, cy, path, x, y, zx, zy;
    x = this.bezier[0];
    y = this.bezier[1];
    ax = this.bezier[2];
    ay = this.bezier[3];
    cx = this.bezier[4];
    cy = this.bezier[5];
    zx = this.bezier[6];
    zy = this.bezier[7];
    path = [["M", x, y], ["C", ax, ay, cx, cy, zx, zy]];
    this.linecurve = this.r.path(path).attr({
      stroke: color || this.raphael.getColor(),
      "stroke-width": 4,
      "stroke-linecap": "round"
    });
    this.edit();
  };

  Polygon.prototype.edit = function() {
    var ax, ay, controls, cx, cy, discattr, linecurve, path, path2, x, y, zx, zy;
    x = this.bezier[0];
    y = this.bezier[1];
    ax = this.bezier[2];
    ay = this.bezier[3];
    cx = this.bezier[4];
    cy = this.bezier[5];
    zx = this.bezier[6];
    zy = this.bezier[7];
    path = [["M", x, y], ["C", ax, ay, cx, cy, zx, zy]];
    path2 = [["M", x, y], ["L", ax, ay], ["M", cx, cy], ["L", zx, zy]];
    discattr = {
      fill: "#F99",
      stroke: "none"
    };
    controls = this.r.set(this.r.path(path2).attr({
      stroke: "#ccc",
      "stroke-dasharray": ". "
    }), this.r.circle(x, y, 5).attr(discattr), this.r.circle(ax, ay, 5).attr(discattr), this.r.circle(cx, cy, 5).attr(discattr), this.r.circle(zx, zy, 5).attr(discattr));
    this.controls = controls;
    linecurve = this.linecurve;
    controls[1].update = function(x, y) {
      var X, Y;
      X = this.attr("cx") + x;
      Y = this.attr("cy") + y;
      this.attr({
        cx: X,
        cy: Y
      });
      path[0][1] = X;
      path[0][2] = Y;
      path2[0][1] = X;
      path2[0][2] = Y;
      controls[2].update(x, y);
    };
    controls[2].update = function(x, y) {
      var X, Y;
      X = this.attr("cx") + x;
      Y = this.attr("cy") + y;
      this.attr({
        cx: X,
        cy: Y
      });
      path[1][1] = X;
      path[1][2] = Y;
      path2[1][1] = X;
      path2[1][2] = Y;
      linecurve.attr({
        path: path
      });
      controls[0].attr({
        path: path2
      });
    };
    controls[3].update = function(x, y) {
      var X, Y;
      X = this.attr("cx") + x;
      Y = this.attr("cy") + y;
      this.attr({
        cx: X,
        cy: Y
      });
      path[1][3] = X;
      path[1][4] = Y;
      path2[2][1] = X;
      path2[2][2] = Y;
      linecurve.attr({
        path: path
      });
      controls[0].attr({
        path: path2
      });
    };
    controls[4].update = function(x, y) {
      var X, Y;
      X = this.attr("cx") + x;
      Y = this.attr("cy") + y;
      this.attr({
        cx: X,
        cy: Y
      });
      path[1][5] = X;
      path[1][6] = Y;
      path2[3][1] = X;
      path2[3][2] = Y;
      controls[3].update(x, y);
    };
    controls.drag(this.movePoint, this.start, this.up);
    this.ft = this.r.freeTransform(this.path, {}, this.updateTransform);
    this.updateTransform(null, ["drag end"]);
  };

  /*
      paper.customAttributes.pathXY = function( x,y ) {
          return { path: Raphael.transformPath(this.attr('path'), ['T', x - getPathX(this), y - getPathY(this) ]) };
      };
  */


  Polygon.prototype.updateTransform = function(ft, event) {
    var control, _i, _len, _ref;
    if (poligonoActual === null) return;
    if (event[0] === "drag end" || event[0] === "rotate end" || event[0] === "scale end") {
      poligonoActual.linecurve.transform(poligonoActual.path.transform());
      _ref = poligonoActual.controls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        control = _ref[_i];
        control.transform(poligonoActual.path.transform());
      }
    }
  };

  Polygon.prototype.noEdit = function() {
    this.ft.unplug();
    this.bezier[0] = this.controls[1].attr("cx");
    this.bezier[1] = this.controls[1].attr("cy");
    this.bezier[2] = this.controls[2].attr("cx");
    this.bezier[3] = this.controls[2].attr("cy");
    this.bezier[4] = this.controls[3].attr("cx");
    this.bezier[5] = this.controls[3].attr("cy");
    this.bezier[6] = this.controls[4].attr("cx");
    this.bezier[7] = this.controls[4].attr("cy");
    this.controls.remove();
  };

  Polygon.prototype.add = function(points, bezier) {
    var b, l, lines, pathString, point, _i, _j, _len, _len1, _ref;
    this.points = points;
    this.bezier = bezier;
    this.bezierOrg = [];
    _ref = this.bezier;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      b = _ref[_i];
      this.bezierOrg[_i] = b;
    }
    l = "M";
    lines = "";
    for (_j = 0, _len1 = points.length; _j < _len1; _j++) {
      point = points[_j];
      lines += l + point[0] + "," + point[1] + " ";
      l = "L";
    }
    pathString = lines + "z";
    this.path = this.r.path(pathString);
    this.path.attr(this.dashed);
    this.curve("hsb(.1, .75, .75)");
    return this.path;
  };

  Polygon.prototype.reset = function() {
    var ax, ay, b, control, cx, cy, path, x, y, zx, zy, _i, _j, _len, _len1, _ref, _ref1;
    this.path.transform("");
    this.linecurve.transform("");
    _ref = this.controls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      control = _ref[_i];
      control.transform("");
    }
    this.noEdit();
    _ref1 = this.bezierOrg;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      b = _ref1[_j];
      this.bezier[_j] = b;
    }
    x = this.bezierOrg[0];
    y = this.bezierOrg[1];
    ax = this.bezierOrg[2];
    ay = this.bezierOrg[3];
    cx = this.bezierOrg[4];
    cy = this.bezierOrg[5];
    zx = this.bezierOrg[6];
    zy = this.bezierOrg[7];
    path = [["M", x, y], ["C", ax, ay, cx, cy, zx, zy]];
    this.linecurve.attr({
      path: path
    });
    this.edit();
  };

  Polygon.prototype.del = function() {
    this.ft.unplug();
    this.controls.remove();
    this.linecurve.remove();
    this.path.remove();
  };

  return Polygon;

})();
